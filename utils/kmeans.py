import os
import sys
import torch

class KMeans:
    def __init__(self, n_clusters:int, max_iter:int=100, batchsize:int=128, mode:str='euclidean', init:str='kmeans++', seed:int=None) -> None:...
    def fit_predict(self, X:torch.Tensor)->torch.Tensor:...
    def fit(self, X:torch.Tensor):...
    def predict(self, X:torch.Tensor)->torch.Tensor:...
    def init_centroids(self)->None:...
    def update_labels(self)->None:...
    def update_centroids(self)->None:...
    def compute_distance_matrix(self, X:torch.Tensor, Y:torch.Tensor)->torch.Tensor:...
    def get_centroids(self) -> torch.Tensor:...

# def __bootstrap__():
#    global __bootstrap__, __loader__, __file__
#    import sys, pkg_resources, imp
#    __file__ = pkg_resources.resource_filename(__name__,'kmeans.so')
#    __loader__ = None; del __bootstrap__, __loader__
#    imp.load_dynamic(__name__,__file__)
# __bootstrap__()

# import kmeans
if not os.path.exists('./utils/csrc/build'): os.makedirs('./utils/csrc/build');
from torch.utils.cpp_extension import load
kmeans = load(name='kmeans', sources=['./utils/csrc/kmeans.cpp'], is_python_module=True, build_directory='./utils/csrc/build', with_cuda=True);
sys.modules['kmeans'] = kmeans;
KMeans = kmeans.KMeans;